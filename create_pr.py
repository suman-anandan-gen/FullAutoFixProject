import os
import subprocess
import requests

REPO_OWNER = "suman-anandan-gen"
REPO_NAME = "FullAutoFixProject"
GITHUB_API_URL = "https://api.github.com"
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
COMMIT_MSG = "fix: auto-applied patch from error logs"
PR_TITLE = "Auto Fix: Patch generated by AI"
PR_BODY = "This PR was generated by an automated script based on the latest error logs."

def run_git(cmds):
    result = subprocess.run(["git"] + cmds, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Git error: {result.stderr}")
        exit(1)
    return result.stdout.strip()

def get_branch_name():
    try:
        with open(".branch_name", "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå Branch name file not found. Run create_branch.py first.")
        exit(1)

def commit_changes():
    print("üì¶ Committing patch to branch...")
    run_git(["add", "."])
    run_git(["commit", "-m", COMMIT_MSG])
    run_git(["push", "--set-upstream", "origin", get_branch_name()])

def create_pull_request(branch_name):
    print("üì¨ Creating pull request...")
    url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/pulls"
    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github+json"
    }
    data = {
        "title": PR_TITLE,
        "head": branch_name,
        "base": "master",
        "body": PR_BODY
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        pr_url = response.json()["html_url"]
        print(f"‚úÖ Pull request created: {pr_url}")
    else:
        print(f"‚ùå Failed to create PR: {response.status_code}")
        print(response.json())

if __name__ == "__main__":
    if not GITHUB_TOKEN:
        print("‚ùå Please set GITHUB_TOKEN in environment.")
        exit(1)

    branch = get_branch_name()
    commit_changes()
    create_pull_request(branch)
